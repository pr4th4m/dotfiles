# set status bar on top
set-option -g status-position top

# status line/bar background and foregorund colors
set-option -g status-bg colour8
set-option -g status-fg colour234

set -g status-left '#[fg=colour245,bold]#S |#[default]'
set -g status-right '#[fg=colour245]#(echo $USER)@#H %a, %d %b %I:%M%p'
set -g status-justify centre
set -g window-status-current-fg colour24
setw -g window-status-current-attr bright

# for 250 color mode support
set -g default-terminal "screen-256color"

# increase scrollback lines
set -g history-limit 10000

# set default shell to zsh
set-option -g default-shell /usr/bin/zsh

# Custom key bindings
bind-key - choose-window  # display all windows

# for unicode support
setw -g utf8 on

# $Id: screen-keys.conf,v 1.7 2010-07-31 11:39:13 nicm Exp $
#
# By Nicholas Marriott. Public domain.
#
# This configuration file binds many of the common GNU screen key bindings to
# appropriate tmux key bindings. Note that for some key bindings there is no
# tmux analogue and also that this set omits binding some commands available in
# tmux but not in screen.
#
# Note this is only a selection of key bindings and they are in addition to the
# normal tmux key bindings. This is intended as an example not as to be used
# as-is.

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# Bind appropriate commands similar to screen.
# lockscreen ^X x
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c
unbind ^C
bind ^C new-window
unbind c
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# displays *
unbind *
bind * list-clients

# next ^@ ^N sp n
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# title A
unbind A
bind A command-prompt "rename-window %%"

# other ^A
unbind ^A
bind ^A last-window

# prev ^H ^P p ^?
unbind ^H
bind ^H previous-window
unbind ^P
bind ^P previous-window
unbind p
bind p previous-window
unbind BSpace
bind BSpace previous-window

# windows ^W w
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# quit \
unbind '\'
bind '\' confirm-before "kill-server"

# kill K k
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay ^L l
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

# split -v v
unbind v
bind v split-window

unbind h
bind h split-window -h

# :kB: focus up
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

# " windowlist -b
unbind '"'
bind '"' choose-window


# ##### VIM Key Bindings ########
# for vim bindings
setw -g mode-keys vi # vim-style movement
# in normal tmux mode
bind Space copy-mode # `tmux prefix + Space` starts copy mode.
bind p paste-buffer # `prefix + p` pastes the latest buffer

# in copy modeâ€¦
bind -t vi-copy v begin-selection # `v` begins a selection. (movement keys to select the desired bits)
bind -t vi-copy y copy-selection # `y` copies the current selection to one of tmux's "paste buffers"
bind -t vi-copy V rectangle-toggle # `V` changes between line- and columnwise selection

bind -t vi-copy Y copy-end-of-line # ^1
bind + delete-buffer

# move x clipboard into tmux paste buffer
bind C-p run-shell -b "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer"
bind C-y run-shell -b "tmux show-buffer | xclip -sel clip -i"

# bind C-p run "tmux set-buffer -- \"$(xsel -o -b)\"; tmux paste-buffer"
# bind C-y run "tmux show-buffer | xsel -i -b"
