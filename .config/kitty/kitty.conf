kitty_mod ctrl+cmd
allow_remote_control yes
listen_on unix:/tmp/kitty

enable_audio_bell no
macos_traditional_fullscreen true
# macos_hide_titlebar true
# window_padding_width 4.0
macos_thicken_font 0.05
macos_option_as_alt yes

shell_integration no-cursor
cursor_shape block
cursor_blink_interval -3

# Performance settings
input_delay 0
repaint_delay 2
sync_to_monitor no
wayland_enable_ime no

# kitten to display key mappings
# https://github.com/ershov/kitty_config
# kitty +kitten config.py | less -R
# map shift+cmd+,    kitten config.py
# map shift+cmd+,    kitten config.py --info --config --actions --no-deleted

# display kitty mappings
map kitty_mod+? launch --type=overlay bash -i -c 'rg "^\s*(map|mouse_map)\s+.*" ~/.config/kitty/kitty.conf | fzf'

# hints
# open hints in editor
map kitty_mod+o>f kitten hints --type linenum --program="launch --type=tab nvim"
map kitty_mod+o>h kitten hints --type hyperlink --program
map kitty_mod+o>u open_url_with_hints 

# copy hints to clipboard
map kitty_mod+c>w kitten hints --type word --program @
map kitty_mod+c>p kitten hints --type path --program @
map kitty_mod+c>l kitten hints --type line --program @
map kitty_mod+c>f kitten hints --type linenum --program @
map kitty_mod+c>h kitten hints --type hyperlink --program @
map kitty_mod+c>u kitten hints --type url --program @
map kitty_mod+c>s kitten hints --type hash --program @

# insert hints to prompt
map kitty_mod+i>w kitten hints --type word --program -
map kitty_mod+i>p kitten hints --type path --program -
map kitty_mod+i>l kitten hints --type line --program -
map kitty_mod+i>f kitten hints --type linenum --program -
map kitty_mod+i>h kitten hints --type hyperlink --program -
map kitty_mod+i>u kitten hints --type url --program -
map kitty_mod+i>s kitten hints --type hash --program -

# send any command to terminals
# map kitty_mod+b send_text all csb; echo $CMAP; $(echo $CMAP)\n

# Scroll buffer commands
# scrollback_pager /usr/local/bin/nvim --noplugin -c "set nonumber nolist showtabline=0 foldcolumn=0" -c "autocmd TermOpen * normal G" -c "silent write! /tmp/kitty_scrollback_buffer | te cat /tmp/kitty_scrollback_buffer - "
# scrollback_pager /usr/local/bin/nvim --noplugin -u NONE -c "set number nolist showtabline=0 foldcolumn=0 laststatus=0" -c "autocmd TermOpen * normal G" -c "map <Space>k :qa!<CR>" -c "set clipboard+=unnamedplus" -c "silent write! /tmp/kitty_scrollback_buffer | te echo -n \"$(cat /tmp/kitty_scrollback_buffer)\" && sleep 1000 "
# custom module doesn't load automatically, so just copy it
# cp .config/kitty/kitty_page.lua /usr/local/share/lua/5.1/
scrollback_pager nvim -u NONE -R -M -c 'lua require("kitty_page")(INPUT_LINE_NUMBER, CURSOR_LINE, CURSOR_COLUMN)' -  
scrollback_pager_history_size 400000
# map ctrl+f show_scrollback
map kitty_mod+/ show_scrollback
# map cmd+k clear_terminal to_cursor active üçé
map ctrl+; clear_terminal to_cursor_scroll active üçé
map kitty_mod+y scroll_line_up
map kitty_mod+e scroll_line_down
map kitty_mod+u scroll_page_up
# kitty_mod+d is by default bound to dictionary in macos
# to disable run below command
# defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70 '<dict><key>enabled</key><false/></dict>'
map kitty_mod+d scroll_page_down
map shift+cmd+u scroll_page_up
map shift+cmd+d scroll_page_down
# map shift+cmd+t scroll_home
# map shift+cmd+b scroll_end

# Marker settings
map kitty_mod+m  create_marker
map shift+cmd+m remove_marker
map kitty_mod+] scroll_to_mark next
map kitty_mod+[ scroll_to_mark prev
map ctrl+m toggle_marker iregex 1 \\bERROR\\b 2 \\bWARNING\\b

# Layout settings
# enabled_layouts fat:bias=80;full_size=1;mirrored=false, stack
# enabled_layouts tall:bias=60, stack
enabled_layouts splits, stack
map cmd+f next_layout
map kitty_mod+v launch --location=vsplit
map kitty_mod+x launch --location=hsplit
map kitty_mod+t focus_visible_window
map shift+cmd+t swap_with_window


map shift+cmd+h resize_window narrower
map shift+cmd+l resize_window wider
map shift+cmd+k resize_window taller
map shift+cmd+j resize_window shorter 3

# Window settings
macos_quit_when_last_window_closed true
# draw_minimal_borders yes
# window_border_width 0.3
# window_margin_width -1.0
active_border_color none
inactive_border_color #3c3d3d

map cmd+n new_os_window
# map shift+cmd+h neighboring_window left
# map shift+cmd+l neighboring_window right
# map shift+cmd+j neighboring_window down
# map shift+cmd+k neighboring_window up
# map ctrl+cmd+p next_window
# map ctrl+cmd+u previous_window
map shift+cmd+space nth_window -1

# "MunsMan/kitty-navigator.nvim",
map ctrl+j kitten pass_keys.py neighboring_window bottom ctrl+j
map ctrl+k kitten pass_keys.py neighboring_window top    ctrl+k
map ctrl+h kitten pass_keys.py neighboring_window left   ctrl+h
map ctrl+l kitten pass_keys.py neighboring_window right  ctrl+l

# # map shift+left move_window right
# # map ctrl+down neighboring_window down
# # map shift+down move_window up
map kitty_mod+r detach_window ask

# Tab settings
map kitty_mod+n new_tab
# map kitty_mod+b launch --cwd=current --type=tab
# map ctrl+cmd+] next_tab
# map ctrl+cmd+[ previous_tab
map kitty_mod+l next_tab
map kitty_mod+h previous_tab

map cmd+1 goto_tab 1
map cmd+2 goto_tab 2
map cmd+3 goto_tab 3
map cmd+4 goto_tab 4
map cmd+5 goto_tab 5
map cmd+6 goto_tab 6
map cmd+7 goto_tab 7
map cmd+8 goto_tab 8
map cmd+9 goto_tab 9
# last active tab, toggle tab
map ctrl+space goto_tab -1

# tab bar settings
tab_bar_style separator
tab_separator " | "
tab_title_template "{index}: {title:.20}"

# Font
font_family      JetBrains Mono NL Thin
italic_font      JetBrains Mono NL Thin Italic
bold_font        JetBrains Mono NL ExtraLight
bold_italic_font JetBrains Mono NL ExtraLight Italic
# font_size 16
# font_size 16.6
# external monitor
font_size 17
adjust_line_height 1
adjust_column_width -1

shell /usr/local/bin/zsh
editor /usr/local/bin/nvim

# Color scheme {{{
# The foreground color
# foreground       #abb2bf

# The background color
# background       #282c34

# The opacity of the background. A number between 0 and 1, where 1 is opaque and 0 is fully transparent.
# This will only work if supported by the OS (for instance, when using a compositor under X11). Note
# that it only sets the default background color's opacity. This is so that
# things like the status bar in vim, powerline prompts, etc. still look good.
# But it means that if you use a color theme with a background color in your
# editor, it will not be rendered as transparent.  Instead you should change the
# default background color in your kitty config and not use a background color
# in the editor color scheme. Or use the escape codes to set the terminals
# default colors in a shell script to launch your editor.
# Be aware that using a value less than 1.0 is a (possibly significant) performance hit.
background_opacity 1.0

# The foreground for selections
# selection_foreground #000000

# The background for selections
# selection_background #FFFACD

# include github_dark_dimmed.conf 
# include habamax.conf


# BEGIN_KITTY_THEME
# kanagawabones
include current-theme.conf
# END_KITTY_THEME

### Different user paths
# open quick notes
map kitty_mod+b launch --location=vsplit env PATH=/usr/local/bin:$PATH nvim ~/OneDrive\ -\ Quick\ Heal\ Technologies\ Ltd/quicknote/quicknote.md

# run pass cli and copy to clipboard
map kitty_mod+g launch --title="KeepassXC" zsh -c 'sh /Users/prathameshnevagi/.config/kitty/pass.sh'
